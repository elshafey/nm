<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Pages extends \Entities\Pages implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setNamespace($namespace)
    {
        $this->__load();
        return parent::setNamespace($namespace);
    }

    public function getNamespace()
    {
        $this->__load();
        return parent::getNamespace();
    }

    public function setPageOrder($pageOrder)
    {
        $this->__load();
        return parent::setPageOrder($pageOrder);
    }

    public function getPageOrder()
    {
        $this->__load();
        return parent::getPageOrder();
    }

    public function setIsActive($isActive)
    {
        $this->__load();
        return parent::setIsActive($isActive);
    }

    public function getIsActive()
    {
        $this->__load();
        return parent::getIsActive();
    }

    public function setCreatedOn($createdOn)
    {
        $this->__load();
        return parent::setCreatedOn($createdOn);
    }

    public function getCreatedOn()
    {
        $this->__load();
        return parent::getCreatedOn();
    }

    public function setUpdatedOn($updatedOn)
    {
        $this->__load();
        return parent::setUpdatedOn($updatedOn);
    }

    public function getUpdatedOn()
    {
        $this->__load();
        return parent::getUpdatedOn();
    }

    public function setParent(\Entities\Pages $parent = NULL)
    {
        $this->__load();
        return parent::setParent($parent);
    }

    public function getParent()
    {
        $this->__load();
        return parent::getParent();
    }

    public function addPageDetail(\Entities\PageDetails $pageDetails)
    {
        $this->__load();
        return parent::addPageDetail($pageDetails);
    }

    public function removePageDetail(\Entities\PageDetails $pageDetails)
    {
        $this->__load();
        return parent::removePageDetail($pageDetails);
    }

    public function getPageDetails()
    {
        $this->__load();
        return parent::getPageDetails();
    }

    public function addPage(\Entities\Pages $pages)
    {
        $this->__load();
        return parent::addPage($pages);
    }

    public function removePage(\Entities\Pages $pages)
    {
        $this->__load();
        return parent::removePage($pages);
    }

    public function getPages()
    {
        $this->__load();
        return parent::getPages();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'namespace', 'pageOrder', 'isActive', 'createdOn', 'updatedOn', 'parent', 'PageDetails', 'Pages');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}